---
# Roborock Vacuums

# The vacuums are rooted and running Valetudo for granular local control and
# separation from the Xiaomi cloud. Plus, I can get the maps in lovelace.
# I've used the mirobo tool built by rytilahti to upload firmware
# ```mirobo --debug discover --handshake true```
# ```mirobo --ip 192.168.8.1 --token $$$ update-firmware firmware.pkg```
# Default login 'root:cleaner'
# Sources
# Vacuumz.info - https://vacuumz.info/download/gen2/
# mirobo - https://github.com/rytilahti/python-miio
# Valetudo - https://github.com/Hypfer/Valetudo
# Firmware Builder - https://github.com/zvldz/vacuum
# Firmware Builder - https://builder.dontvacuum.me

automation:
  ################################################################################
  # keep the vacuum going if it complains that it's stuck.
  # We have fairly high pile carpets, and the added resistance against the
  # brush is typically percieved as something being caught in the brush.
  # To work around this, we just tell the vacuum to keep going.
  - id: function_vacuum_restart
    alias: 'Function - Vacuum - Restart'
    trigger:
      - platform: state
        entity_id:
          - vacuum.downstairs
          - vacuum.upstairs
        from:
          - cleaning
          - returning
          - error
        to:
          - error
          - idle
        for:
          minutes: 5
    action:
      #  This hasn't seemed to work, so let me make sure the template works
      - service: notify.notify
        data_template:
          title: '{{ trigger.attributes.friendly_name }} has gotten stuck'
          message: >
            I'm going to tell it to get back to work.
            You might want to check on it.
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.from == 'cleaning' }}"
            sequence:
              - service: vacuum.start
                data_template:
                  entity_id: '{{ trigger.entity_id }}'
          - conditions:
              - condition: template
                value_template: "{{ trigger.from == 'returning' }}"
            sequence:
              - service: vacuum.return_to_base
                data_template:
                  entity_id: '{{ trigger.entity_id }}'
          - conditions:
              - condition: template
                value_template: "{{ trigger.from == 'error' }}"
            sequence:
              - service: vacuum.return_to_base
                data_template:
                  entity_id: '{{ trigger.entity_id }}'
  ################################################################################
  # While we're out of the house, keep sending the vacuum out as soon as it's
  # reached a full charge. This may or may not end well.
  - id: function_vacuum_continue
    alias: 'Function - Vacuum - Continue'
    trigger:
      - platform: numeric_state
        entity_id:
          - vacuum.downstairs
          - vacuum.upstairs
        value_template: >
          {{ state.attributes.battery_level | int }}
        above: 99
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.away_mode
          state: 'on'
        - condition: template
          value_template: >
            {{ trigger.attributes.state == "docked" }}
        # If that doesn't work. Here's a backup.
        # {{ state_attr(trigger.entity_id, 'state') == "docked" }}
    action:
      - delay: 0:30
      - service: 'vacuum.start'
        data_template:
          entity_id: '{{ trigger.entity_id }}'
  ################################################################################
