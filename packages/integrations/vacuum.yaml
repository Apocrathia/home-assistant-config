---
# Roborock Vacuums

# The vacuums are rooted and running Valetudo-RE for granular local control and
# separation from the Xiaomi cloud. Plus, I can get the maps in lovelace.
# I've used the mirobo tool to upload firmware built by vacuumz.info
# mirobo --ip 192.168.8.1 --token $$$ update-firmware firmware.pkg
# Vacuumz.info - https://vacuumz.info/download/gen2/
# mirobo - https://github.com/rytilahti/python-miio
# ValetudoRE - https://github.com/rand256/Valetudo/
# https://github.com/zvldz/vacuum
# https://dustbuilder.xvm.mit.edu/

vacuum:
  # Downstairs
  - platform: xiaomi_miio
    name: Downstairs Vacuum
    host: !secret downstairs_vacuum_host
    token: !secret downstairs_vacuum_token
  # Upstairs
  - platform: xiaomi_miio
    name: Upstairs Vacuum
    host: !secret upstairs_vacuum_host
    token: !secret upstairs_vacuum_token

# Both of these devices are also being populated in Home Assistant
# via MQTT auto-discovery, which I may or may not utilize in the future.
# I like that the miio protocol does not rely on an MQTT broker.
# The devices get populated as 'vacuum.downstairs' & 'vacuum.upstairs'
# which is a little less redundant than 'vacuum.downstairs_vacuum' etc.
# I don't know how I'll proceed. I'm just making notes for future me.
# Update: As the device tokens keep changing as the vacuums have been
# doing that weird factory reset thing every night, I've migrated to
# using the MQTT devices. It's a bit more stable.

# For drawing the map in Lovelace, I am using the Valetudo map card
# https://github.com/TheLastProject/lovelace-valetudo-map-card
# The following sensor configuration is required.
sensor:
  - platform: mqtt
    unique_id: upstairs_vacuum_map
    state_topic: "vacuum/upstairs/state"
    json_attributes_topic: "vacuum/upstairs/map_data_parsed"
    name: Upstairs Vacuum Map
    value_template: 'OK'
    # scan_interval: 5
  - platform: mqtt
    unique_id: downstairs_vacuum_map
    state_topic: "vacuum/downstairs/state"
    json_attributes_topic: "vacuum/downstairs/map_data_parsed"
    name: Downstairs Vacuum Map
    value_template: 'OK'
    # scan_interval: 5

# Keep the database from getting out of control 
recorder:
  exclude:
    entities:
      - sensor.downstairs_vacuum_map
      - sensor.upstairs_vacuum_map

# Alternatively, using the camera integration is another option and
# simply pull the image from valetudo-mapper. I'll do that when I can finally
# get valetudo-mapper to work... https://github.com/rand256/valetudo/issues/135
# https://github.com/PiotrMachowski/lovelace-xiaomi-vacuum-map-card

switch:
################################################################################
  - platform: template
    switches:
# Downstairs Vacuum
      downstairs_vacuum:
        friendly_name: "Downstairs Vacuum"
        value_template: "{{ is_state('vacuum.downstairs', 'on') }}"
        turn_on:
          service: 'vacuum.start'
          data:
            entity_id: 'vacuum.downstairs'
        turn_off: 
          service: 'vacuum.stop'
          data:
            entity_id: 'vacuum.downstairs'
        icon_template: >-
          {% if is_state('vacuum.downstairs', 'on') %}
            mdi:broom
          {% else %}
            mdi:robot-vacuum
          {% endif %}
################################################################################
# Upstairs Vacuum
      upstairs_vacuum:
        friendly_name: "Upstairs Vacuum"
        value_template: "{{ is_state('vacuum.upstairs', 'on') }}"
        turn_on:
          service: 'vacuum.start'
          data:
            entity_id: 'vacuum.upstairs'
        turn_off: 
          service: 'vacuum.stop'
          data:
            entity_id: 'vacuum.upstairs'
        icon_template: >-
          {% if is_state('vacuum.upstairs', 'on') %}
            mdi:broom
          {% else %}
            mdi:robot-vacuum
          {% endif %}
################################################################################

automation:
################################################################################
# keep the vacuum going if it complains that it's stuck.
# We have fairly high pile carpets, and the added resistance against the 
# brush is typically percieved as something being caught in the brush.
# To work around this, we just tell the vacuum to keep going.
  - id: function_vacuum_restart
    alias: "Function - Vacuum - Restart"
    # initial_state: 'on'
    trigger:
      - platform: state
        entity_id:
          - vacuum.downstairs_vacuum
          - vacuum.upstairs_vacuum
        from: cleaning
        to: error
        for: 
          minutes: 5
    action:
      #  This hasn't seemed to work, so let me make sure the template works
      - service: notify.notify
        data_template:
          title: "{{ trigger.attributes.friendly_name }} has gotten stuck"
          message: >
            I'm going to tell it to get back to work.
            You might want to check on it.
      - delay: 0:30
      - service: 'vacuum.start'
        data_template:
          entity_id: "{{ trigger.entity_id }}"
      # It seems to need a second nudge from time to time
      - delay: 0:30
      - service: 'vacuum.start'
        data_template:
          entity_id: "{{ trigger.entity_id }}"
################################################################################
# While we're out of the house, keep sending the vacuum out as soon as it's
# reached a full charge. This may or may not end well.
  - id: function_vacuum_continue
    alias: "Function - Vacuum - Continue"
    # initial_state: 'on'
    trigger:
      - platform: numeric_state
        entity_id:
          - vacuum.downstairs_vacuum
          - vacuum.upstairs_vacuum
        value_template: "{{ state.attributes.battery_level }}"
        above: 99
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.away_mode
          state: 'on'
        - condition: template
          value_template: "{{ trigger.entity_id }} = docked"
    action:
      - delay: 0:30
      - service: 'vacuum.start'
        data_template:
          entity_id: "{{ trigger.entity_id }}"
################################################################################
# Every now and then the vacuums seem to get stuck or can't find the dock, and
# they just give up really easily. Re-sending a go-to dock command usually works
# So, we'll do that automatically if it's been sitting idle for 5 minutes.
  - id: function_vacuum_idle
    alias: "Function - Vacuum - Idle"
    # initial_state: 'on'
    trigger:
      - platform: state
        entity_id:
          - vacuum.downstairs_vacuum
          - vacuum.upstairs_vacuum
        to: idle
        for:
          minutes: 5
    action:
      - service: 'vacuum.return_to_base'
        data_template:
          entity_id: "{{ trigger.entity_id }}"
################################################################################
# Because nobody is leaving the house thanks to the current pandemic, our vacuum
# cleaners have barely run lately. This automation will check every morning to 
# see if the vacuum has run within the last 24 hours. If not, send it out.
  - id: function_vacuum_daily_downstairs
    alias: "Function - Vacuum - Daily (Downstairs)"
    trigger:
      - platform: time
        at: "08:00:00" # Check every morning at 0800
    condition:
      condition: state
      entity_id: vacuum.downstairs
      state: docked
      for:
        hours: 24
    action:
      - service: vacuum.start
        entity_id: vacuum.downstairs
  - id: function_vacuum_daily_upstairs
    alias: "Function - Vacuum - Daily (Upstairs)"
    trigger:
      - platform: time
        at: "08:00:00" # Check every morning at 0800
    condition:
      condition: state
      entity_id: vacuum.upstairs
      state: docked
      for:
        hours: 24
    action:
      - service: vacuum.start
        entity_id: vacuum.upstairs
# Try to consolidate into a single automation
  - id: function_vacuum_daily
    alias: "Function - Vacuum - Daily"
    trigger:
      - platform: time
        at: "08:00:00" # Check every morning at 0800
    condition:
      condition: state
      entity_id:
        - vacuum.downstairs_vacuum
        - vacuum.upstairs_vacuum
      state: docked
      for:
        hours: 24
    action:
      - service: vacuum.start
        entity_id: 
          - vacuum.downstairs_vacuum
          - vacuum.upstairs_vacuum
################################################################################