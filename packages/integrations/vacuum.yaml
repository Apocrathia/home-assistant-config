---
# Roborock Vacuums

# Update 20210308 - Vacuums have been migrated to the standard Valetudo.
# The vacuums are rooted and running Valetudo-RE for granular local control and
# separation from the Xiaomi cloud. Plus, I can get the maps in lovelace.
# I've used the mirobo tool to upload firmware built by rytilahti
# mirobo --ip 192.168.8.1 --token $$$ update-firmware firmware.pkg
# Vacuumz.info - https://vacuumz.info/download/gen2/
# mirobo - https://github.com/rytilahti/python-miio
# ValetudoRE - https://github.com/rand256/Valetudo/
# https://github.com/zvldz/vacuum
# https://dustbuilder.xvm.mit.edu/

# Deprecated as of 2021.3.0
# https://www.home-assistant.io/blog/2021/03/03/release-20213/#breaking-changes
# vacuum:
#   # Downstairs
#   - platform: xiaomi_miio
#     id: downstairs_miio
#     name: Downstairs Vacuum
#     host: !secret downstairs_vacuum_host
#     token: !secret downstairs_vacuum_token
#   # Upstairs
#   - platform: xiaomi_miio
#     name: Upstairs Vacuum
#     host: !secret upstairs_vacuum_host
#     token: !secret upstairs_vacuum_token

# Both of these devices are also being populated in Home Assistant
# via MQTT auto-discovery, which I may or may not utilize in the future.
# I like that the miio protocol does not rely on an MQTT broker.
# The devices get populated as 'vacuum.downstairs' & 'vacuum.upstairs'
# which is a little less redundant than 'vacuum.downstairs_vacuum' etc.
# I don't know how I'll proceed. I'm just making notes for future me.
# Update: As the device tokens keep changing as the vacuums have been
# doing that weird factory reset thing every night, I've migrated to
# using the MQTT devices. It's a bit more stable.
# Update 20210303: Switched to using miio primarily almost a month ago
# and it seemed to break some of my automations. This is mostly due to
# an availability issue that caused state duration times to be reset.
# Going back to MQTT.

# No longer required with Valetudo 2021.02.0
# For drawing the map in Lovelace, I am using the Valetudo map card
# https://github.com/TheLastProject/lovelace-valetudo-map-card
# The following sensor configuration is required.
# sensor:
#   - platform: mqtt
#     unique_id: upstairs_vacuum_map
#     state_topic: "vacuum/upstairs/state"
#     json_attributes_topic: "vacuum/upstairs/map_data_parsed"
#     name: Upstairs Vacuum Map
#     value_template: 'OK'
#     scan_interval: 5
#   - platform: mqtt
#     unique_id: downstairs_vacuum_map
#     state_topic: "vacuum/downstairs/state"
#     json_attributes_topic: "vacuum/downstairs/map_data_parsed"
#     name: Downstairs Vacuum Map
#     value_template: 'OK'
#     scan_interval: 5

# Keep the database from getting out of control
# recorder:
#   exclude:
#     entities:
#       - sensor.downstairs_vacuum_map
#       - sensor.upstairs_vacuum_map

# Alternatively, using the camera integration is another option and
# simply pull the image from valetudo-mapper. I'll do that when I can finally
# get valetudo-mapper to work... https://github.com/rand256/valetudo/issues/135
# https://github.com/PiotrMachowski/lovelace-xiaomi-vacuum-map-card

automation:
  ################################################################################
  # keep the vacuum going if it complains that it's stuck.
  # We have fairly high pile carpets, and the added resistance against the
  # brush is typically percieved as something being caught in the brush.
  # To work around this, we just tell the vacuum to keep going.
  - id: function_vacuum_restart
    alias: 'Function - Vacuum - Restart'
    trigger:
      - platform: state
        entity_id:
          - vacuum.downstairs
          - vacuum.upstairs
          - vacuum.downstairs_vacuum
          - vacuum.upstairs_vacuum
        from:
          - cleaning
          - returning
        to:
          - error
          - idle
        for:
          seconds: 30
    action:
      #  This hasn't seemed to work, so let me make sure the template works
      - service: notify.notify
        data_template:
          title: '{{ trigger.attributes.friendly_name }} has gotten stuck'
          message: >
            I'm going to tell it to get back to work.
            You might want to check on it.
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.from == 'cleaning' }}"
            sequence:
              - service: vacuum.start
                data_template:
                  entity_id: '{{ trigger.entity_id }}'
          - conditions:
              - condition: template
                value_template: "{{ trigger.from == 'returning' }}"
            sequence:
              - service: vacuum.return_to_base
                data_template:
                  entity_id: '{{ trigger.entity_id }}'
  ################################################################################
  # While we're out of the house, keep sending the vacuum out as soon as it's
  # reached a full charge. This may or may not end well.
  - id: function_vacuum_continue
    alias: 'Function - Vacuum - Continue'
    trigger:
      - platform: numeric_state
        entity_id:
          - vacuum.downstairs
          - vacuum.upstairs
        value_template: >
          {{ state.attributes.battery_level | int }}
        above: 99
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.away_mode
          state: 'on'
        - condition: template
          value_template: >
            {{ trigger.attributes.state == "docked" }}
        # If that doesn't work. Here's a backup.
        # {{ state_attr(trigger.entity_id, 'state') == "docked" }}
    action:
      - delay: 0:30
      - service: 'vacuum.start'
        data_template:
          entity_id: '{{ trigger.entity_id }}'
  ################################################################################
  # Every now and then the vacuums seem to get stuck or can't find the dock, and
  # they just give up really easily. Re-sending a go-to dock command usually works
  # So, we'll do that automatically if it's been sitting idle for 5 minutes.
  # - id: function_vacuum_idle
  #   alias: "Function - Vacuum - Idle"
  #   trigger:
  #     - platform: state
  #       entity_id:
  #         - vacuum.downstairs_vacuum
  #         - vacuum.upstairs_vacuum
  #       to: idle
  #       for:
  #         minutes: 5
  #   action:
  #     - service: 'vacuum.start' # Just keep cleaning
  #       data_template:
  #         entity_id: "{{ trigger.entity_id }}"
  ################################################################################
  # Because nobody is leaving the house thanks to the current pandemic, our vacuum
  # cleaners have barely run lately. This automation will check every morning to
  # see if the vacuum has run within the last 24 hours. If not, send it out.
  - id: function_vacuum_daily_downstairs
    alias: 'Function - Vacuum - Daily (Downstairs)'
    trigger:
      - platform: time
        at: '05:00:00' # Check every morning at 0500
    condition:
      condition: state
      entity_id: vacuum.downstairs
      state:
        - docked
        - unavailable # Vacuums keep disappearing at around 0300
      for:
        hours: 24
    action:
      - service: vacuum.start
        entity_id: vacuum.downstairs
  - id: function_vacuum_daily_upstairs
    alias: 'Function - Vacuum - Daily (Upstairs)'
    trigger:
      - platform: time
        at: '05:00:00' # Check every morning at 0500
    condition:
      condition: state
      entity_id: vacuum.downstairs
      state:
        - docked
        - unavailable # Vacuums keep disappearing at around 0300
      for:
        hours: 24
    action:
      - service: vacuum.start
        entity_id: vacuum.upstairs
################################################################################
