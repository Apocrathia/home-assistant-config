### Roomba ###

# The majority of this has come from TheHookUp's YouTube channel
# https://www.youtube.com/watch?v=t2NgA8qYcFI
# Upon further investigation, I've determined that the ESP01 board isn't going to be enough for this project.
# Instead, I have opted for the ESP12E. The sole reasoning for this was due to the amount of memory available.
# I want to be able to use Platform.IO in order to be able to perform OTA updates to the devices.
# That way, if I need to make any sort of changes, I don't have to tear apart the Roomba.
# The code in which I used is available here:
# https://github.com/Apocrathia/esp-roomba-mqtt
# Additionally, the full Roomba open interface spec can be found here:
# https://www.irobot.lv/uploaded_files/File/iRobot_Roomba_500_Open_Interface_Spec.pdf

# Sample MQTT JSON Output
# {"battery_level":"100","cleaning":false,"docked":true,"charging":"Trickle Charging","voltage":19454,"current":0,"charge":2696}

# Another useful resource:
# https://github.com/isabellaalstrom/HomeAssistantConfiguration/blob/master/packages/roomba.yaml

homeassistant:
################################################################################
  customize:
# Upstairs Roomba
    vacuum.roomba_upstairs:
      friendly_name: "Upstairs Roomba"
      icon: mdi:robot-vacuum
# Downstairs Roomba
    vacuum.roomba_downstairs:
      friendly_name: "Downstairs Roomba"
      icon: mdi:robot-vacuum
################################################################################

group:
################################################################################
  roombas:
    name: Roombas
    entities:
      - vacuum.roomba_upstairs
      - vacuum.roomba_downstairs
################################################################################

#automation:
################################################################################
# There are 2 primary automations I want here:
# 1) Automatically run the roombas when everyone leaves, and send them back to
#     their docks when we get home. Check for vacation switch.
#  - id: platform_roomba_clean
#    alias: 'Platform - Roomba - Clean'
#    initial_state: 'on'
#    trigger:
#      - platform: template
#        value_template: >
#          {{ is_state('binary_sensor.vacancy', 'on') }}
#    condition:
#      condition: template
#      value_template: >
#        {{ is_state('group.vacation_settings', 'off') }}
#    action:
#      - service: 'vacuum.turn_on'
#        data_template: >
#          {% for state in states.vacuum %}
#            {{ state.entity_id }}
#          {% endfor %}
# 2) When the battery gets < 50%, return to base, charge, then keep cleaning.
#  - id: platform_roomba_return
#    alias: 'Platform - Roomba - Return'
#    initial_state: 'on'
#        trigger:
#      - platform: template
#        value_template: >
#          {{ is_state('binary_sensor.vacancy', 'on') }}
#    condition:
#      condition: template
#      value_template: >
#        {{ is_state('group.vacation_settings', 'off') }}
#    action:
#      - service: 'vacuum.turn_on'
#        data_template: >
#          {% for state in states.vacuum %}
#            {{ state.entity_id }}
#          {% endfor %}
# 3) Adding another one: Send a notification if the Roomba is stuck somewhere.
#  - id: platform_roomba_dead
#    alias: 'Platform - Roomba - Stuck'
#    initial_state: 'on'
# NOTE: As of right now, I am accomplishing these functions in Node-RED.
################################################################################

switch:
################################################################################
  - platform: template
    switches:
# Upstairs Roomba
      roomba_upstairs:
        friendly_name: "Upstairs Roomba"
        value_template: "{{ is_state('vacuum.roomba_upstairs', 'on') }}"
        turn_on: 
          service: 'vacuum.start_pause'
          data:
            entity_id: 'vacuum.roomba_upstairs'
        turn_off: 
          service: 'vacuum.stop'
          data:
            entity_id: 'vacuum.roomba_upstairs'
        icon_template: >-
          {% if is_state('vacuum.roomba_upstairs', 'on') %}
            mdi:broom
          {% else %}
            mdi:robot-vacuum
          {% endif %}
# Downstairs Roomba
      roomba_downstairs:
        friendly_name: "Downstairs Roomba"
        value_template: "{{ is_state('vacuum.roomba_downstairs', 'on') }}"
        turn_on:
          service: 'vacuum.start_pause'
          data:
            entity_id: 'vacuum.roomba_downstairs'
        turn_off: 
          service: 'vacuum.stop'
          data:
            entity_id: 'vacuum.roomba_downstairs'
        icon_template: >-
          {% if is_state('vacuum.roomba_downstairs', 'on') %}
            mdi:broom
          {% else %}
            mdi:robot-vacuum
          {% endif %}
################################################################################

vacuum:
################################################################################
  - platform: mqtt
    name: roomba_upstairs
    supported_features:
      - turn_on
      - turn_off
      - pause
      - stop
      - return_home
      - battery
      - status
# The locate function is still a stub in the code.
# https://github.com/Apocrathia/esp-roomba-mqtt/blob/master/src/main.cpp#L91
#      - locate
      - clean_spot
      - send_command
    command_topic: "vacuum/upstairs/command"
    battery_level_topic: "vacuum/upstairs/state"
    battery_level_template: "{{ value_json['battery_level'] }}"
    charging_topic: "vacuum/upstairs/state"
    charging_template: "{{ value_json['charging'] }}"
    cleaning_topic: "vacuum/upstairs/state"
    cleaning_template: "{{ value_json['cleaning'] }}"
    docked_topic: "vacuum/upstairs/state"
    docked_template: "{{ value_json['docked'] }}"
    send_command_topic: 'vacuum/upstairs/send_command'
################################################################################

################################################################################
  - platform: mqtt
    name: roomba_downstairs
    supported_features:
      - turn_on
      - turn_off
      - pause
      - stop
      - return_home
      - battery
      - status
# The locate function is still a stub in the code.
# https://github.com/Apocrathia/esp-roomba-mqtt/blob/master/src/main.cpp#L91
#      - locate
      - clean_spot
      - send_command
    command_topic: "vacuum/downstairs/command"
    battery_level_topic: "vacuum/downstairs/state"
    battery_level_template: "{{ value_json['battery_level'] }}"
    charging_topic: "vacuum/downstairs/state"
    charging_template: "{{ value_json['charging'] }}"
    cleaning_topic: "vacuum/downstairs/state"
    cleaning_template: "{{ value_json['cleaning'] }}"
    docked_topic: "vacuum/downstairs/state"
    docked_template: "{{ value_json['docked'] }}"
    send_command_topic: 'vacuum/downstairs/send_command'
################################################################################
